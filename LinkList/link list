
//Write a function to reverse the nodes of a linked list.
#include<iostream> 
using namespace std;

struct Node
{
int data;
struct Node* next;
Node(int data)
{
this->data = data;
next = NULL;
}
};

struct LinkedList
{
Node *head;
LinkedList()
{
head = NULL;
}


/* Function to reverse the linked list */
void reverse()
{
// Initialize current, previous and 
// next pointers 
Node *current = head;
Node *prev = NULL, *next = NULL;


while (current != NULL)
{
// Store next node
next = current->next;

// Reverse current node's pointer 
current->next = prev;

// Move pointers one position ahead to next node. 
prev = current;
current = next;
}
head = prev;
}

/* Function to print linked list */
void print()
{
struct Node *temp = head;
while (temp != NULL)
{
cout << temp->data << " ";
temp = temp->next;
}
}

void push(int data)
{
Node *temp = new Node(data);
temp->next = head;
head = temp;
}
};

/* Driver program to test above function*/
int main()
{
/* Start with the empty list */
LinkedList b;
b.push(55);
b.push(11);
b.push(22);
b.push(185);

cout << "Given linked list\n";
b.print();

b.reverse();

cout << "\nReversed Linked list \n";
b.print();
